<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang='en' xml:lang='en' xmlns='http://www.w3.org/1999/xhtml'>
  <head>
    <title>set_trace_func ~ Going Functional</title>
    <meta content='text/html; charset=utf-8' http-equiv='content-type' />
    <link rel="stylesheet" href="/css/blueprint.css" type="text/css"/>
    <!--[if IE]>
      <link rel="stylesheet" href="/css/blueprint-ie.css" type="text/css"/>
    <![endif]-->
    <link rel="stylesheet" href="/css/master.css" type="text/css"/>
    <link href='http://feeds.feedburner.com/set_trace_func' rel='alternate' type='application/atom+xml' />
    <script type='text/javascript' src="http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js"></script>
    <script type='text/javascript' src="/js/prettify.js"></script>
    <script type='text/javascript' src="/js/blog.js"></script>
  </head>
  <body>
    <div class='container'>
      <div class='span-20 last' id='header'>
        <h1>
          <a href='/'>set_trace_func</a>
        </h1>
        <h2>veni, vidi, didici</h2>
      </div>
      <div class='span-20 last' id='menu'>
        <div id='feedburner'>
          <a href='http://feeds.feedburner.com/set_trace_func'>
            <img alt='RSS Feed' src='http://feeds.feedburner.com/~fc/set_trace_func?bg=0099ff&amp;fg=000000&amp;anim=0' />
          </a>
        </div>
        <ul style='float: right;'>
          <li>
            <a>&#8203;</a>
          </li>
          <li>
            <a href='/about.html'>About Me</a>
          </li>
        </ul>
        <ul>
          <li>
            <a href='/archive.html'>Archive</a>
          </li>
          <li>
            <a href='/tags.html'>Tags</a>
          </li>
          <li>
            <a href='/projects.html'>Projects</a>
          </li>
        </ul>
      </div>
      <div id='content-wrap'>
        <div class='span-18' id='content'>
          <div id='article'>
            <div class='article hentry'>
              <!-- %h3.entry-title{:rel => 'bookmark'}= link_to_page(@page) -->
              <h3 class='entry-title'><a href="/2009/01/17/going-functional">Going Functional</a></h3>
              <div class='entry-content'>
                <p>So, some <a href="http://news.ycombinator.com/">Hacker News</a> users recently <a href="http://news.ycombinator.com/item?id=428248">decided</a> that it'd be a good idea to <a href="http://groups.google.com/group/hacker-news-reads-sicp/">work through</a> the <a href="http://mitpress.mit.edu/sicp/">SICP</a> together and make a kind of book club out of the deal over irc.</p>
                
                <p>When I heard of it, I thought it'd be a good excuse to work through the text myself (since it was just sitting on my bookshelf), and also stretch my brain a bit more teaching myself <a href="http://clojure.org/">Clojure</a>.  I'm almost done the reading and <a href="http://github.com/jamie/sicp/">exercises</a> for section 1.1, and I'm already finding it a valuable exercise.</p>
                
                <p>The third exercise asks us to "define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers."  At either extremity are two solutions.  The straightforward solution a new programmer can generate based solely on the first 20 pages of the text looks something like this:</p>
                
                <pre><code>(defn sum-largest-squares [a b c]&#x000A;  (cond (and (&lt; a b) (&lt; a c)) (+ (* b b) (* c c))&#x000A;        (and (&lt; b a) (&lt; b c)) (+ (* a a) (* c c))&#x000A;        (and (&lt; c a) (&lt; c b)) (+ (* a a) (* b b))))&#x000A;</code></pre>
                
                <p>Some tests to prove correctness, returning 2^2 + 3^2, or 13, are:</p>
                
                <pre><code>(sum-largest-squares 1 2 3)&#x000A;(sum-largest-squares 2 3 1)&#x000A;(sum-largest-squares 3 1 2)&#x000A;</code></pre>
                
                <p>An interesting (and enlightening) exercise is to take our naive function, and just start randomly refactoring, and see where it takes us.  One step at a time, making sure we are always passing our handful of test cases.  The goal is to decompose and abstract the function into more manageable pieces, with less repetition.  To start:</p>
                
                <pre><code>(defn sum-largest-squares [a b c]&#x000A;  (cond (and (&lt; a b) (&lt; a c)) (+ (square b) (square c))&#x000A;        (and (&lt; b a) (&lt; b c)) (+ (square a) (square c))&#x000A;        (and (&lt; c a) (&lt; c b)) (+ (square a) (square b))))&#x000A;</code></pre>
                
                <p>The square function is trivially pulling out (* x x), and conveniently is already present in Clojure.</p>
                
                <p>Second step is to pull out the three conditional clauses into sum-of-squares:</p>
                
                <pre><code>(defn sum-of-squares [a b]&#x000A;  (+ (square a) (square b)))&#x000A;&#x000A;(defn sum-largest-squares [a b c]&#x000A;  (cond (and (&lt; a b) (&lt; a c)) (sum-of-squares b c)&#x000A;        (and (&lt; b a) (&lt; b c)) (sum-of-squares a c)&#x000A;        (and (&lt; c a) (&lt; c b)) (sum-of-squares a b)))&#x000A;</code></pre>
                
                <p>Next, we can probably abstract the conditionals themselves, since what we're looking for is the smallest of three elements (min is also provided by clojure):</p>
                
                <pre><code>(defn sum-largest-squares [a b c]&#x000A;  (cond (= a (min a b c)) (sum-of-squares b c)&#x000A;        (= b (min a b c)) (sum-of-squares a c)&#x000A;        (= c (min a b c)) (sum-of-squares a b)))&#x000A;</code></pre>
                
                <p>Now, we've got a much more parallel structure here, so we should be able to collapse the conditional, and process the values first.</p>
                
                <p>I'll stop here, but there are a few different ways to get started with the next step - most involve transitioning our three arguments into a list at some point.  I've found it instructive to play around with the different ways of decomposing the problem (including a few side steps along the way to the route I've followed above).  I'm thinking that as I continue with the SICP exercies, I'll try and make a habit of not stopping with the first solution that springs out of my text editor, but to try and explore the structure of the code through refactoring.</p>
                
                <p>Also, while I never managed to figure out refactoring steps that would produce it, I think the most straightforward functional solution (rather than the semi-iterative solution we started with above) winds up being this - it has a certain elegance to it, no?</p>
                
                <pre><code>(defn sum-largest-squares [a b c]&#x000A;  (apply + (map square (rest (sort (list a b c))))))&#x000A;</code></pre>
              </div>
              <div class='footer'>
                <abbr class="published date" title="2009-01-17T10:00:00-05:00">Jan 17, 2009 at 10:00</abbr>
                &nbsp; | &nbsp; tagged:
                <a href="/tags.html#clojure">clojure</a>
                <a href="/tags.html#sicp">sicp</a>
              </div>
            </div>
            <div id='disqus_thread'></div>
            <script src='http://disqus.com/forums/tracefunc/embed.js' type='text/javascript'></script>
            <noscript>
              <a href='http://tracefunc.disqus.com/?url=ref'>View the discussion thread.</a>
            </noscript>
            <a class='dsq-brlink' href='http://disqus.com'>blog comments powered by <span class="logo-disqus">Disqus</span></a>
          </div>
        </div>
      </div>
      <div class='span-20 last' id='footer'>
        <p>
          &copy; 2006-2008 <span class="author vcard"><span class="fn">Jamie Macey</span></span>
          |
          Original design: <a href="http://www.styleshout.com/templates/preview/CoolWater1-0/index.html">CoolWater</a> by <a href="http://www.styleshout.com/">styleshout</a>
        </p>
      </div>
    </div>
    <script type='text/javascript'>
      var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
      document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
    </script>
    <script type='text/javascript'>
      try {
      var pageTracker = _gat._getTracker("UA-11614297-1");
      pageTracker._setDomainName(".tracefunc.com");
      pageTracker._trackPageview();
      } catch(err) {}
    </script>
  </body>
</html>
